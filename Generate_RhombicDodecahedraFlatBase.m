outputFolder = 'C:\Users\info\source\repos\RhombicDodecahedron';
outputFile = 'RhombicDodecahedraFlatBase.stl';

baseVertices = [...
12.0 0.0 6*sqrt(2);...
6.0 -6*sqrt(2) 6*sqrt(2);...
18.0 -6*sqrt(2) 6*sqrt(2);...
...
12.0 0.0 6*sqrt(2);...
18.0 6*sqrt(2) 6*sqrt(2);...
6.0 6*sqrt(2) 6*sqrt(2);...
...
-6.0 6*sqrt(2) 6*sqrt(2);...
-6.0 0.0 0.0;...
0.0 6*sqrt(2) 0.0;...
...
-6.0 0.0 0.0;...
-6.0 6*sqrt(2) 6*sqrt(2);...
-12.000 0.0 6*sqrt(2);...
...
-6.0 -6*sqrt(2) 6*sqrt(2);...
-6.0 0.0 0.0;...
-12.000 0.0 6*sqrt(2);...
...
-6.0 0.0 0.0;...
-6.0 -6*sqrt(2) 6*sqrt(2);...
0.0 -6*sqrt(2) 0.0;...
...
6.0 6*sqrt(2) 6*sqrt(2);...     
0.0 6*sqrt(2) 0.0;...
6.0 0.0 0.0;...
...
6.0 0.0 0.0;...
12.000 0.0 6*sqrt(2);...
6.0 6*sqrt(2) 6*sqrt(2);...
...
6.0 -6*sqrt(2) 6*sqrt(2);... 
12.000 0.0 6*sqrt(2);...
6.0 0.0 0.0;...
...
6.0 0.0 0.0;...
0.0 -6*sqrt(2) 0.0;...
6.0 -6*sqrt(2) 6*sqrt(2)];

fid = fopen([outputFolder '\' outputFile],'wt');
fprintf(fid, 'solid rhombicDodecahedraFlatBase\n');
for zmult = 0:1
  for j = -1:2
    for i = -1:1
      vertices = baseVertices;
      vertices = vertices  + ones(size(vertices,1),1) * [i*24 (j-0.5)*12*sqrt(2) 0];
      vertices(:,3) = zmult * vertices(:,3);
      if zmult == 0
        temp = vertices(1:3:end,:);
        vertices(1:3:end,:) = vertices(2:3:end,:);
        vertices(2:3:end,:) = temp;
      end
      if i == 1
        vertices = vertices(7:end,:);
      end
      
      for f = 1:(size(vertices,1)/3)
        fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
        fprintf(fid, '    outer loop\n');
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
        fprintf(fid, '    endloop\n');
        fprintf(fid, 'endfacet\n');
      end
    end
  end
end
% handle the annoying boundary conditions
baseVertices = [...
-12.0 -6*sqrt(2) 6*sqrt(2);...
-6.0 -6*sqrt(2) 6*sqrt(2);...
-12.0 0.0 6*sqrt(2);...
-6.0 6*sqrt(2) 6*sqrt(2);...
-12.0 6*sqrt(2) 6*sqrt(2);...
-12.0 0.0 6*sqrt(2);...
-12.0 0 6*sqrt(2);...
-12.0 -6*sqrt(2) 0;...
-12.0 -6*sqrt(2) 6*sqrt(2);...
-12.0 0 0;...
-12.0 -6*sqrt(2) 0;...
-12.0 0 6*sqrt(2);...
-12.0 6*sqrt(2) 6*sqrt(2);...
-12.0 0 0;...
-12.0 0 6*sqrt(2);...
-12.0 6*sqrt(2) 0;...
-12.0 0 0;...
-12.0 6*sqrt(2) 6*sqrt(2);...
];
for i = -1:2:1
  for j = -1:2
    for zmult = 0:1
      vertices = baseVertices;
      if i == 1
        vertices(:,1) = -vertices(:,1);
      end
      vertices = vertices  + ones(size(vertices,1),1) * [i*24 (j-0.5)*12*sqrt(2) 0];
      vertices(:,3) = zmult * vertices(:,3);   
      if mod(zmult + (i + 1)/2, 2) == 0
        temp = vertices(1:3:end,:);
        vertices(1:3:end,:) = vertices(2:3:end,:);
        vertices(2:3:end,:) = temp;
      end
      for f = 1:(size(vertices,1)/3)
        fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
        fprintf(fid, '    outer loop\n');
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
        fprintf(fid, '    endloop\n');
        fprintf(fid, 'endfacet\n');
      end
    end
  end
end
baseVertices = [...
-6.0 -6*sqrt(2) 6*sqrt(2);...
6.0 -6*sqrt(2) 6*sqrt(2);...
0.0 -6*sqrt(2) 0;...
6.0 -6*sqrt(2)-3 6*sqrt(2);...
-6.0 -6*sqrt(2)-3 6*sqrt(2);...
0.0 -6*sqrt(2)-3 0;...
6.0 -6*sqrt(2)-3 6*sqrt(2);...
0.0 -6*sqrt(2)-3 0;...
12.0 -6*sqrt(2)-3 0;...
-6.0 -6*sqrt(2)-3 6*sqrt(2);...
-12.0 -6*sqrt(2)-3 0;...
0.0 -6*sqrt(2)-3 0;...
12.0 -6*sqrt(2)-3 6*sqrt(2);...
6.0 -6*sqrt(2)-3 6*sqrt(2);...
12.0 -6*sqrt(2)-3 0;...
-6.0 -6*sqrt(2)-3 6*sqrt(2);...
-12.0 -6*sqrt(2)-3 6*sqrt(2);...
-12.0 -6*sqrt(2)-3 0;...
];
for i = -1:1
  for j = -1:3:2
    vertices = baseVertices;
    vertices(:,3) = zmult * vertices(:,3);
    if j == 2
      vertices(:,2) = -vertices(:,2);
      temp = vertices(1:3:end,:);
      vertices(1:3:end,:) = vertices(2:3:end,:);
      vertices(2:3:end,:) = temp;
    end
    vertices = vertices  + ones(size(vertices,1),1) * [i*24 (j-0.5)*12*sqrt(2) 0];  
    for f = 1:(size(vertices,1)/3)
      fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
      fprintf(fid, '    outer loop\n');
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
      fprintf(fid, '    endloop\n');
      fprintf(fid, 'endfacet\n');
    end
  end
end
baseVertices = [...
6.0 -6*sqrt(2) 6*sqrt(2);...
-6.0 -6*sqrt(2) 6*sqrt(2);...
-6.0 -6*sqrt(2)-3 6*sqrt(2);...
-6.0 -6*sqrt(2)-3 6*sqrt(2);...
6.0 -6*sqrt(2)-3 6*sqrt(2);...
6.0 -6*sqrt(2) 6*sqrt(2);...
-6.0 -6*sqrt(2) 6*sqrt(2);...
-12.0 -6*sqrt(2) 6*sqrt(2);...
-12.0 -6*sqrt(2)-3 6*sqrt(2);...
-12.0 -6*sqrt(2)-3 6*sqrt(2);...
-6.0 -6*sqrt(2)-3 6*sqrt(2);...
-6.0 -6*sqrt(2) 6*sqrt(2);...
12.0 -6*sqrt(2) 6*sqrt(2);...
6.0 -6*sqrt(2) 6*sqrt(2);...
6.0 -6*sqrt(2)-3 6*sqrt(2);...
6.0 -6*sqrt(2)-3 6*sqrt(2);...
12.0 -6*sqrt(2)-3 6*sqrt(2);...
12.0 -6*sqrt(2) 6*sqrt(2);...
];
for i = -1:1
  for j = -1:3:2
    for zmult = 0:1
      vertices = baseVertices;
      vertices(:,3) = zmult * vertices(:,3);
      if j == 2
        vertices(:,2) = -vertices(:,2);
      end
      vertices = vertices  + ones(size(vertices,1),1) * [i*24 (j-0.5)*12*sqrt(2) 0];  
      if mod(zmult + (j + 1)/3, 2) == 0
        temp = vertices(1:3:end,:);
        vertices(1:3:end,:) = vertices(2:3:end,:);
        vertices(2:3:end,:) = temp;
      end
      for f = 1:(size(vertices,1)/3)
        fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
        fprintf(fid, '    outer loop\n');
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
        fprintf(fid, '    endloop\n');
        fprintf(fid, 'endfacet\n');
      end
    end
  end
end
fprintf(fid, 'endsolid\n');
fclose(fid);

