
clc
outputFolder = 'C:\Users\info\source\repos\RhombicDodecahedron';
outputFile = 'RhombicDodecahedraFCCBase.stl';

baseVertices = [...
6.0 -6.0 -6.0;...
0.0 0.0 -12.0;...
-6.0 -6.0 -6.0;...

-6.0 -6.0 -6.0;...
0.0 0.0 -12.0;...
-6.0 6.0 -6.0;...

-6.0 6.0 -6.0;...
0.0 0.0 -12.0;...
6.0 6.0 -6.0;...

6.0 6.0 -6.0;...
0.0 0.0 -12.0;...
6.0 -6.0 -6.0];

fid = fopen([outputFolder '\' outputFile],'wt');
fprintf(fid, 'solid rhombicDodecahedron\n');
for zmult = 0:1
  for j = -2:2
    for i = -2:2
      vertices = baseVertices;
      if (mod(i + j, 2) == 1)
        vertices(:,3) = -vertices(:,3) - 12.0;
        if j == -2
          vertices(1:3,:) = []; % boundary condition -- don't plot this triangle
        endif
        if j == 2
          vertices(7:9,:) = []; % boundary condition -- don't plot this triangle
        endif
        if i == 2
          vertices(10:12,:) = []; % boundary condition -- don't plot this triangle
        endif
        if i == -2
          vertices(4:6,:) = []; % boundary condition -- don't plot this triangle
        endif
      endif
      
      vertices = vertices + ones(size(vertices,1),1) * [i*12 j*12 12];
      vertices(:,3) = zmult * vertices(:,3);
      if zmult == 0
        temp = vertices(1:3:end,:);
        vertices(1:3:end,:) = vertices(2:3:end,:);
        vertices(2:3:end,:) = temp;
      end
      for f = 1:(size(vertices,1)/3)
        fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
        fprintf(fid, '    outer loop\n');
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
        fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
        fprintf(fid, '    endloop\n');
        fprintf(fid, 'endfacet\n');
      end
    end
  end
end
% handle the annoying boundary conditions
baseVerticesA = ...
[6.0 -6.0 6.0;...
0.0 0.0 0.0;...
-6.0 -6.0 6.0;...
6.0 -6.0 6.0;...
-6.0 -6.0 6.0;...
0.0 -12.0 12.0;...
6.0 -6.0 6.0;...
6.0 -6.0 -6.0;...
0.0 0.0 0.0;...
-6.0 -6.0 -6.0;...
-6.0 -6.0 6.0;...
0.0 0.0 0.0;...
6.0 -6.0 6.0;...
0.0 -12.0 12.0;...
0.0 -12.0 -12.0;...
0.0 -12.0 12.0;...
-6.0 -6.0 6.0;...
0.0 -12.0 -12.0;...
6.0 -6.0 6.0;...
0.0 -12.0 -12.0;...
6.0 -6.0 -6.0;...
0.0 -12.0 -12.0;...
-6.0 -6.0 6.0;...
-6.0 -6.0 -6.0;...
];
baseVerticesB = ...
[
0.0 -12.0 -12.0;...
-6.0 -6.0 -6.0;...
-6.0 -12.0 -12.0;...

6.0 -6.0 -6.0;...
0.0 -12.0 -12.0;...
6.0 -12.0 -12.0;...

0.0 -12.0 0.0;...
-6.0 -6.0 -6.0;...
0.0 -12.0 -12.0;...

6.0 -6.0 -6.0;...
0.0 -12.0 0.0;...
0.0 -12.0 -12.0;...

6.0 -6.0 -6.0;...
-6.0 -6.0 -6.0;...
0.0 -12.0 0.0;...
];
baseVerticesC = ...
[
-6.0 -6.0 30.0;...
0.0 -12.0 24.0;...
-12.0 0.0 24.0;...

0.0 -12.0 24.0;...
-6.0 -6.0 30.0;...
-12.0 -12.0 24.0;...

-6.0 -6.0 30.0;...
-12.0 0.0 24.0;...
-12.0 -12.0 24.0;...

0.0 -12.0 24.0;...
-6.0 -6.0 -6.0;...
-12.0 0.0 24.0;...

-12.0 0.0 24.0;...
-6.0 -6.0 -6.0;...
-12.0 0.0 0.0;...

-6.0 -6.0 -6.0;...
0.0 -12.0 24.0;...
-0.0 -12.0 0.0;...

0.0 -12.0 24.0;...
-12.0 -12.0 24.0;...
0.0 -12.0 -12.0;...

-12.0 -12.0 24.0;...
-12.0 -12.0 -12.0;...
0.0 -12.0 -12.0;...

-12.0 -12.0 24.0;...
-12.0 0.0 24.0;...
-12.0 0.0 -12.0;...

-12.0 -12.0 -12.0;...
-12.0 -12.0 24.0;...
-12.0 0.0 -12.0;...

];
for zmult = 0:1
  for r=0:3
    theta = r*pi/2;
    rotMatrix = [
    cos(theta) -sin(theta) 0; ...
    sin(theta) cos(theta) 0; ...
    0 0 1];
    for j = -2:-2
      for i = -2:2
        if (mod(i + j, 2) == 1)
          vertices = [baseVerticesA; baseVerticesB(1:6,:)];
        else
          if i == -2
            vertices = [baseVerticesB(4:6,:); baseVerticesB(10:end,:)];
            if j == -2
              vertices = [vertices; baseVerticesC];
            endif
          elseif i == 2
            vertices = [baseVerticesB(1:3,:); baseVerticesB(7:9,:); baseVerticesB(13:end,:)];
          else
            vertices = baseVerticesB;
          endif
        endif    
        vertices = vertices + ones(size(vertices,1),1) * [i*12 j*12 12];
        vertices = vertices * rotMatrix';
        
        vertices(:,3) = zmult * vertices(:,3);
        if zmult == 0
          temp = vertices(1:3:end,:);
          vertices(1:3:end,:) = vertices(2:3:end,:);
          vertices(2:3:end,:) = temp;
        end
        for f = 1:(size(vertices,1)/3)
          fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
          fprintf(fid, '    outer loop\n');
          fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
          fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
          fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
          fprintf(fid, '    endloop\n');
          fprintf(fid, 'endfacet\n');
        end
      end
    end
  end
end

fprintf(fid, 'endsolid\n');
fclose(fid);

