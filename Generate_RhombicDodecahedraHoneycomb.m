clc
outputFolder = 'C:\Users\info\source\repos\RhombicDodecahedron';
outputFile = 'RhombicDodecahedraHoneycomb.stl';

% separate adjacent cells by 3 mm, making the outside walls 1.5 mm
% (will be slightly larger due to xyScaleFactor)
sepFactor = (12*sqrt(2) + 3) / (12*sqrt(2))

% expand each cell in x-y by 0.4 mm (assume a 0.2 mm tolerance on all sides)
xyScaleFactor = (12*sqrt(2) + 0.4) / (12*sqrt(2))

baseVerticesBottom = [...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          0         -6*sqrt(3);...
0          4*sqrt(6) -4*sqrt(3);...
0          0         -6*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
-6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          0         -6*sqrt(3);...
6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
0          0         -6*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          4*sqrt(6) -4*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...
0          0         -6*sqrt(3);...
-6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
0          0         -6*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...
6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
];

baseVerticesTop = [...
0          0          6*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
0          0          6*sqrt(3);...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
0          0          6*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
0          0          6*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...
0          0          6*sqrt(3);...
0          4*sqrt(6)  2*sqrt(3);...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
0          4*sqrt(6)  2*sqrt(3);...
0          0          6*sqrt(3);...
-6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
];

baseVerticesMiddleA = [...
0         -4*sqrt(6) -2*sqrt(3);...
-6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...

6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...

6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...

0          4*sqrt(6) -4*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          4*sqrt(6)  2*sqrt(3);...

-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          4*sqrt(6) -4*sqrt(3);...
0          4*sqrt(6)  2*sqrt(3);...

-6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
];

baseVerticesMiddleB = [...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
0          4*sqrt(6)  2*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...

0          4*sqrt(6)  2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...

-6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...

-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...

0         -4*sqrt(6)  4*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...

6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
];

gapVertices = [...
-6*sqrt(2) -2*sqrt(6) 2*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...

-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
0         -sepFactor*4*sqrt(6)  sepFactor*4*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...

0         -4*sqrt(6) 4*sqrt(3);...
0         -sepFactor*4*sqrt(6) sepFactor*4*sqrt(3);...
6*sqrt(2) -2*sqrt(6) 2*sqrt(3);...

0         -sepFactor*4*sqrt(6) sepFactor*4*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
6*sqrt(2) -2*sqrt(6) 2*sqrt(3);...

6*sqrt(2) -2*sqrt(6) 2*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...

sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...

6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...
sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
0          4*sqrt(6) 2*sqrt(3);...

sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
0          sepFactor*4*sqrt(6) sepFactor*2*sqrt(3);...
0          4*sqrt(6) 2*sqrt(3);...

0          4*sqrt(6) 2*sqrt(3);...
0          sepFactor*4*sqrt(6) sepFactor*2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...

0          sepFactor*4*sqrt(6) sepFactor*2*sqrt(3);...
-sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...

-6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...
-sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
-6*sqrt(2) -2*sqrt(6) 2*sqrt(3);

-sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);
-6*sqrt(2) -2*sqrt(6) 2*sqrt(3);
];

borderVerticesBL = [...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
0         -sepFactor*4*sqrt(6)  sepFactor*4*sqrt(3);...
0         -sepFactor*4*sqrt(6)  -6*sqrt(3);...

0         -sepFactor*4*sqrt(6)  -6*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
];

borderVerticesBR = [...
0         -sepFactor*4*sqrt(6)  sepFactor*4*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
0         -sepFactor*4*sqrt(6)  -6*sqrt(3);...

sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...
0         -sepFactor*4*sqrt(6)  -6*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
];

borderVerticesTL = [...
0         sepFactor*4*sqrt(6)  sepFactor*2*sqrt(3);...
-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
0         sepFactor*4*sqrt(6)  -6*sqrt(3);...

-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) -6*sqrt(3);...
0         sepFactor*4*sqrt(6)  -6*sqrt(3);...
-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
];

borderVerticesTR = [...
sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
0         sepFactor*4*sqrt(6)  sepFactor*2*sqrt(3);...
0         sepFactor*4*sqrt(6)  -6*sqrt(3);...

0         sepFactor*4*sqrt(6)  -6*sqrt(3);...
sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) -6*sqrt(3);...
sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
];

borderVerticesL = [...
-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...

-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...
-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) -6*sqrt(3);...
-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
];

borderVerticesR = [...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...

sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) -6*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...
sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
];

fid = fopen([outputFolder '\' outputFile],'wt');
fprintf(fid, 'solid rhombicDodecahedraHoneycomb\n');
baseVerticesMiddleA_copy = baseVerticesMiddleA;
baseVerticesMiddleA_copy(1:3:end, 3) = -6*sqrt(3);
baseVerticesMiddleA_copy(2:3:end, 3) = -6*sqrt(3);
baseVerticesMiddleB_copy = baseVerticesMiddleB;
baseVerticesMiddleB_copy(3:3:end, 3) = -6*sqrt(3);
for j = -2:2
  istart = -2;
  if (mod(j,2)==1)
    iend = 1;
  else
    iend = 2;
  endif
  if abs(j) ==2
    istart = -1;
    iend = 1;
  endif
  for i = istart:iend
    vertices = [...
    baseVerticesMiddleA_copy;...
    baseVerticesMiddleB_copy;...
    gapVertices;...
    ];
    
    % grid placement
    vertices = vertices  + ones(size(vertices,1),1) * ...
    [sepFactor*i*12*sqrt(2) sepFactor*j*6*sqrt(6) 6*sqrt(3)];
    
    % grid placement
    if (mod(j,2)==1)
      vertices = vertices  + ones(size(vertices,1),1) * ...
      [sepFactor*6*sqrt(2) 0 0];
    endif
    
    % apply xy scale factor
    vertices(:,1:2) = xyScaleFactor * vertices(:,1:2);
    
    for f = 1:(size(vertices,1)/3)
      fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
      fprintf(fid, '    outer loop\n');
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
      fprintf(fid, '    endloop\n');
      fprintf(fid, 'endfacet\n');
    end
  end
end

% Generate base
for j = -2:2
  istart = -2;
  if (mod(j,2)==1)
    iend = 1;
  else
    iend = 2;
  endif
  if abs(j) ==2
    istart = -1;
    iend = 1;
  endif
  for i = istart:iend
    vertices = [...
    gapVertices;...
    ];
  
    vertices = vertices  + ones(size(vertices,1),1) * ...
    [sepFactor*i*12*sqrt(2) sepFactor*j*6*sqrt(6) 6*sqrt(3)];
    if (mod(j,2)==1)
      vertices = vertices  + ones(size(vertices,1),1) * ...
      [sepFactor*6*sqrt(2) 0 0];
    endif
    
    % Orientation flip
    temp = vertices(1:3:end,:);
    vertices(1:3:end,:) = vertices(2:3:end,:);
    vertices(2:3:end,:) = temp;
  
    % project onto Z=0 plane
    vertices(:,3) = 0 * vertices(:,3);
    
    % apply xy scale factor
    vertices(:,1:2) = xyScaleFactor * vertices(:,1:2);
    
    for f = 1:(size(vertices,1)/3)
      fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
      fprintf(fid, '    outer loop\n');
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
      fprintf(fid, '    endloop\n');
      fprintf(fid, 'endfacet\n');
    end
  end
end

% deal with annoying boundary conditions
for j = -2:2
  istart = -2;
  if (mod(j,2)==1)
    iend = 1;
  else
    iend = 2;
  endif
  if abs(j) ==2
    istart = -1;
    iend = 1;
  endif
  for i = istart:iend
  vertices = zeros(0,3);
  
  if (j == -2 || (i == istart && j <= 0))
    vertices = [vertices; borderVerticesBL];
  endif
  
  if (j == -2 || (i == iend && j <= 0))
    vertices = [vertices; borderVerticesBR];
  endif
  
  if (j == 2 || (i == istart && j >= 0))
    vertices = [vertices; borderVerticesTL];
  endif
  
  if (j == 2 || (i == iend && j >= 0))
    vertices = [vertices; borderVerticesTR];
  endif
  
  if (i == istart)
    vertices = [vertices; borderVerticesL];
  endif
  
  if (i == iend)
    vertices = [vertices; borderVerticesR];
  endif
  
  vertices = vertices  + ones(size(vertices,1),1) * ...
  [sepFactor*i*12*sqrt(2) sepFactor*j*6*sqrt(6) 6*sqrt(3)];
  if (mod(j,2)==1)
    vertices = vertices  + ones(size(vertices,1),1) * ...
    [sepFactor*6*sqrt(2) 0 0];
  endif  
  
  % Orientation flip
  if (ySign > 0)
    temp = vertices(1:3:end,:);
    vertices(1:3:end,:) = vertices(2:3:end,:);
    vertices(2:3:end,:) = temp;
  endif
  
  % apply xy scale factor
  vertices(:,1:2) = xyScaleFactor * vertices(:,1:2);
  
  for f = 1:(size(vertices,1)/3)
    fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
    fprintf(fid, '    outer loop\n');
    fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
    fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
    fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
    fprintf(fid, '    endloop\n');
    fprintf(fid, 'endfacet\n');
  end
end
end

fprintf(fid, 'endsolid\n');
fclose(fid);


