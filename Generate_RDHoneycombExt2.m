clear all
close all
clc
outputFolder = 'C:\Users\info\source\repos\RhombicDodecahedron';
outputFile = 'RDHoneycombExt2.stl';

% separate adjacent cells by 3 mm, making the outside walls 1.5 mm
% (will be slightly larger due to xyScaleFactor)
sepFactor = (12*sqrt(2) + 3) / (12*sqrt(2))

% expand each cell in x-y by 0.4 mm (assume a 0.2 mm tolerance on all sides)
xyScaleFactor = (12*sqrt(2) + 0.4) / (12*sqrt(2))

baseVerticesBottom = [...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          0         -6*sqrt(3);...
0          4*sqrt(6) -4*sqrt(3);...
0          0         -6*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
-6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          0         -6*sqrt(3);...
6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
0          0         -6*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          4*sqrt(6) -4*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...
0          0         -6*sqrt(3);...
-6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
0          0         -6*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...
6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
];

baseVerticesTop = [...
0          0          6*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
0          0          6*sqrt(3);...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
0          0          6*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
0          0          6*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...
0          0          6*sqrt(3);...
0          4*sqrt(6)  2*sqrt(3);...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
0          4*sqrt(6)  2*sqrt(3);...
0          0          6*sqrt(3);...
-6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
];

baseVerticesMiddleA = [...
0         -4*sqrt(6) -2*sqrt(3);...
-6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...

6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...

6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...

0          4*sqrt(6) -4*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          4*sqrt(6)  2*sqrt(3);...

-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          4*sqrt(6) -4*sqrt(3);...
0          4*sqrt(6)  2*sqrt(3);...

-6*sqrt(2) -2*sqrt(6) -4*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
];

baseVerticesMiddleB = [...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
0          4*sqrt(6)  2*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...

0          4*sqrt(6)  2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...

-6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...

-6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...

0         -4*sqrt(6)  4*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...

6*sqrt(2) -2*sqrt(6)  2*sqrt(3);...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
];

midVerticesExt = [...
0         -4*sqrt(6) -2*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  -4*sqrt(3);...

%companion
0          -4*sqrt(6)  -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
-6*sqrt(2)+(sepFactor-1)*6*sqrt(2) -2*sqrt(6)-(sepFactor-1)*2*sqrt(6)  -4*sqrt(3)-(sepFactor-1)*4*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  -4*sqrt(3);...

0         -4*sqrt(6) -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
0         -4*sqrt(6) -2*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  -4*sqrt(3);...

%companion
6*sqrt(2)-(sepFactor-1)*6*sqrt(2) -2*sqrt(6)-(sepFactor-1)*2*sqrt(6)  -4*sqrt(3)-(sepFactor-1)*4*sqrt(3);...
0          -4*sqrt(6)  -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  -4*sqrt(3);...

6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
6*sqrt(2) -2*sqrt(6)  -4*sqrt(3);...

%companion
6*sqrt(2) -2*sqrt(6)  -4*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
6*sqrt(2) -2*sqrt(6)+(sepFactor-1)*4*sqrt(6)  -4*sqrt(3)-(sepFactor-1)*4*sqrt(3);...

6*sqrt(2)  2*sqrt(6) -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
0          4*sqrt(6)  -4*sqrt(3);...

%companion
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  -4*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)+(sepFactor-1)*4*sqrt(6)  -4*sqrt(3)-(sepFactor-1)*4*sqrt(3);...

%companion
6*sqrt(2)  2*sqrt(6)  -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
0          4*sqrt(6)  -4*sqrt(3);...
(sepFactor-1)*6*sqrt(2)          4*sqrt(6)-(sepFactor-1)*2*sqrt(6)  -4*sqrt(3)-(sepFactor-1)*4*sqrt(3);...

-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
0          4*sqrt(6)  -4*sqrt(3);...

%companion
0           4*sqrt(6)  -4*sqrt(3);...
-6*sqrt(2)  2*sqrt(6)  -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
-(sepFactor-1)*6*sqrt(2)          4*sqrt(6)-(sepFactor-1)*2*sqrt(6)  -4*sqrt(3)-(sepFactor-1)*4*sqrt(3);...

-6*sqrt(2)  2*sqrt(6) -2*sqrt(3)-(sepFactor-1)*6*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) -2*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)  -4*sqrt(3);...
];

smallGapVertices = [...
-6*sqrt(2) + (2-sepFactor)*6*sqrt(2) -2*sqrt(6) - (2-sepFactor)*2*sqrt(6) 2*sqrt(3) + (2-sepFactor)*2*sqrt(3);...
-sepFactor*6*sqrt(2)+6*sqrt(2) -sepFactor*2*sqrt(6)-2*sqrt(6) sepFactor*2*sqrt(3)+2*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...

-sepFactor*6*sqrt(2)+6*sqrt(2) -sepFactor*2*sqrt(6)-2*sqrt(6) sepFactor*2*sqrt(3)+2*sqrt(3);...
0         -sepFactor*4*sqrt(6)  sepFactor*4*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...

sepFactor*6*sqrt(2)-6*sqrt(2) -sepFactor*2*sqrt(6)-2*sqrt(6) sepFactor*2*sqrt(3)+2*sqrt(3);...
6*sqrt(2) - (2-sepFactor)*6*sqrt(2) -2*sqrt(6) - (2-sepFactor)*2*sqrt(6) 2*sqrt(3) + (2-sepFactor)*2*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...

0         -sepFactor*4*sqrt(6)  sepFactor*4*sqrt(3);...
sepFactor*6*sqrt(2)-6*sqrt(2) -sepFactor*2*sqrt(6)-2*sqrt(6) sepFactor*2*sqrt(3)+2*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...

6*sqrt(2) -2*sqrt(6)+(2-sepFactor)*4*sqrt(6) 2*sqrt(3)+(2-sepFactor)*2*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6)+4*sqrt(6) sepFactor*2*sqrt(3)+2*sqrt(3);...
6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...

sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6)+4*sqrt(6) sepFactor*2*sqrt(3)+2*sqrt(3);...
sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...

6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...
sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
(2-sepFactor)*6*sqrt(2) 4*sqrt(6)-(2-sepFactor)*2*sqrt(6) 2*sqrt(3)+(2-sepFactor)*2*sqrt(3);...

sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
6*sqrt(2) sepFactor*4*sqrt(6)-2*sqrt(6) sepFactor*2*sqrt(3)+2*sqrt(3);...
(2-sepFactor)*6*sqrt(2) 4*sqrt(6)-(2-sepFactor)*2*sqrt(6) 2*sqrt(3)+(2-sepFactor)*2*sqrt(3);...

-sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...
-(2-sepFactor)*6*sqrt(2) 4*sqrt(6)-(2-sepFactor)*2*sqrt(6) 2*sqrt(3)+(2-sepFactor)*2*sqrt(3);...

-6*sqrt(2) sepFactor*4*sqrt(6)-2*sqrt(6) sepFactor*2*sqrt(3)+2*sqrt(3);...
-sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
-(2-sepFactor)*6*sqrt(2) 4*sqrt(6)-(2-sepFactor)*2*sqrt(6) 2*sqrt(3)+(2-sepFactor)*2*sqrt(3);...

-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6)+4*sqrt(6) sepFactor*2*sqrt(3)+2*sqrt(3);...
-6*sqrt(2) -2*sqrt(6)+(2-sepFactor)*4*sqrt(6) 2*sqrt(3)+(2-sepFactor)*2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...

-sepFactor*6*sqrt(2)  sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6)+4*sqrt(6) sepFactor*2*sqrt(3)+2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) 4*sqrt(3);...
];

borderVerticesBL = [...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
0         -sepFactor*4*sqrt(6)  sepFactor*4*sqrt(3);...
0         -sepFactor*4*sqrt(6)  -6*sqrt(3);...

0         -sepFactor*4*sqrt(6)  -6*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
];

borderVerticesBR = [...
0         -sepFactor*4*sqrt(6)  sepFactor*4*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
0         -sepFactor*4*sqrt(6)  -6*sqrt(3);...

sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...
0         -sepFactor*4*sqrt(6)  -6*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
];

borderVerticesTL = [...
0         sepFactor*4*sqrt(6)  sepFactor*2*sqrt(3);...
-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
0         sepFactor*4*sqrt(6)  -6*sqrt(3);...

-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) -6*sqrt(3);...
0         sepFactor*4*sqrt(6)  -6*sqrt(3);...
-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
];

borderVerticesTR = [...
sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
0         sepFactor*4*sqrt(6)  sepFactor*2*sqrt(3);...
0         sepFactor*4*sqrt(6)  -6*sqrt(3);...

0         sepFactor*4*sqrt(6)  -6*sqrt(3);...
sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) -6*sqrt(3);...
sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
];

gapVertices = [...
0          0          6*sqrt(3);...
(sepFactor-1)*6*sqrt(2) -(sepFactor-1)*2*sqrt(6)  6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...

(sepFactor-1)*6*sqrt(2) -(sepFactor-1)*2*sqrt(6)  6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
(sepFactor-1)*6*sqrt(2) -4*sqrt(6) + (sepFactor-1)*2*sqrt(6)  4*sqrt(3) - (sepFactor-1)*2*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...

(sepFactor-1)*6*sqrt(2) -(sepFactor-1)*2*sqrt(6) 6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
0          0          6*sqrt(3);...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...

(sepFactor-1)*6*sqrt(2) -(sepFactor-1)*2*sqrt(6) 6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...
6*sqrt(2)  2*sqrt(6) - (sepFactor-1)*4*sqrt(6)  4*sqrt(3) - (sepFactor-1)*2*sqrt(3);...

0          0          6*sqrt(3);...
-(sepFactor-1)*6*sqrt(2) -(sepFactor-1)*2*sqrt(6)  6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
-6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...

-(sepFactor-1)*6*sqrt(2) -(sepFactor-1)*2*sqrt(6)  6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
-6*sqrt(2)  2*sqrt(6) - (sepFactor-1)*4*sqrt(6)  4*sqrt(3) - (sepFactor-1)*2*sqrt(3);...
-6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...

-(sepFactor-1)*6*sqrt(2) -(sepFactor-1)*2*sqrt(6)  6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
0          0          6*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...

-(sepFactor-1)*6*sqrt(2) -4*sqrt(6) + (sepFactor-1)*2*sqrt(6)  4*sqrt(3) - (sepFactor-1)*2*sqrt(3);...
-(sepFactor-1)*6*sqrt(2) -(sepFactor-1)*2*sqrt(6)  6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
0         -4*sqrt(6)  4*sqrt(3);...

0          0          6*sqrt(3);...
0          (sepFactor-1)*4*sqrt(6)  6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...

0          (sepFactor-1)*4*sqrt(6)  6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
6*sqrt(2) - (sepFactor-1)*6*sqrt(2)  2*sqrt(6) + (sepFactor-1)*2*sqrt(6)  4*sqrt(3) - (sepFactor-1)*2*sqrt(3);...
6*sqrt(2)  2*sqrt(6)  4*sqrt(3);...

0          (sepFactor-1)*4*sqrt(6)  6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
0          0          6*sqrt(3);...
-6*sqrt(2) 2*sqrt(6)  4*sqrt(3);...

-6*sqrt(2) + (sepFactor-1)*6*sqrt(2)  2*sqrt(6) + (sepFactor-1)*2*sqrt(6)  4*sqrt(3) - (sepFactor-1)*2*sqrt(3);...
0          (sepFactor-1)*4*sqrt(6)  6*sqrt(3) - (sepFactor-1)*4*sqrt(3);...
-6*sqrt(2) 2*sqrt(6)  4*sqrt(3);...
];

borderVerticesL = [...
-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...

-sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...
-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) -6*sqrt(3);...
-sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
];

borderVerticesR = [...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) sepFactor*2*sqrt(3);...
sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...

sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) -6*sqrt(3);...
sepFactor*6*sqrt(2) -sepFactor*2*sqrt(6) -6*sqrt(3);...
sepFactor*6*sqrt(2) sepFactor*2*sqrt(6) sepFactor*4*sqrt(3);...
];

baseVerticesMiddleA_copy = baseVerticesMiddleA;
baseVerticesMiddleA_copy(1:3:end, 3) = -6*sqrt(3);
baseVerticesMiddleA_copy(2:3:end, 3) = -6*sqrt(3);
baseVerticesMiddleB_copy = baseVerticesMiddleB;
baseVerticesMiddleB_copy(3:3:end, 3) = -6*sqrt(3);

fid = fopen([outputFolder '\' outputFile],'wt');
fprintf(fid, 'solid rhombicDodecahedraHoneycomb\n');
for j = -2:1
  istart = -2 + floor(abs(j)/2);
  iend = 2 - ceil(abs(j)/2);
  if j >= 0
    istart = istart + 1;
    iend = iend - 1;
  endif
  for i = istart:iend
    vertices = gapVertices;
    
    % Orientation flip
    temp = vertices(1:3:end,:);
    vertices(1:3:end,:) = vertices(2:3:end,:);
    vertices(2:3:end,:) = temp;
    
    vertices = [...
      vertices;...
      smallGapVertices;
      ];
      
    % Orientation flip
    temp = vertices(1:3:end,:);
    vertices(1:3:end,:) = vertices(2:3:end,:);
    vertices(2:3:end,:) = temp;
        
    % grid placement
    vertices = vertices  + ones(size(vertices,1),1) * ...
    [sepFactor*i*12*sqrt(2) sepFactor*j*6*sqrt(6)+sepFactor*4*sqrt(6) 6*sqrt(3)];
    
    % grid placement
    if (mod(j,2)==1)
      vertices = vertices  + ones(size(vertices,1),1) * ...
      [sepFactor*6*sqrt(2) 0 0];
    endif
    
    % apply xy scale factor
    vertices(:,1:2) = xyScaleFactor * vertices(:,1:2);
    
    for f = 1:(size(vertices,1)/3)
      fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
      fprintf(fid, '    outer loop\n');
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
      fprintf(fid, '    endloop\n');
      fprintf(fid, 'endfacet\n');
    end
  end
end

% Generate the walls
for j = -3:1
  istart = -1 + floor(abs(j)/2);
  iend = 1 - ceil(abs(j)/2);
  if j == -1
    istart = istart - 1;
    iend = iend + 1;
  elseif j < -1
    istart = istart - 2;
    iend = iend + 2;
  endif
  for i = istart:iend
    vertices = zeros(0,3);
    
    midVertices = [...
      baseVerticesMiddleA;...
      baseVerticesMiddleB;...
      midVerticesExt;...
      ];
    %  midVertices(:,3) = midVertices(:,3) + 8*sqrt(3) - (sepFactor-1)*4*sqrt(3);
    midVertices(:,3) = midVertices(:,3) + 8*sqrt(3) + (sepFactor-1)*2*sqrt(3);
    midVertices(:,2) = midVertices(:,2) + sepFactor*4*sqrt(6);
    
    % Truncate the z-coordinate
    midZs = midVertices(:,3);
    midZs(midZs > 10*sqrt(3)) = 10*sqrt(3);
    midVertices(:,3) = midZs;
    
    vertices = [...
      vertices;...
      midVertices;...
      ];
    
    % grid placement
    vertices = vertices  + ones(size(vertices,1),1) * ...
    [sepFactor*i*12*sqrt(2) sepFactor*j*6*sqrt(6)+sepFactor*4*sqrt(6) 6*sqrt(3)];
    
    % grid placement
    if (mod(j,2)==1)
      vertices = vertices  + ones(size(vertices,1),1) * ...
      [sepFactor*6*sqrt(2) 0 0];
    endif
    
    % apply xy scale factor
    vertices(:,1:2) = xyScaleFactor * vertices(:,1:2);
    
    for f = 1:(size(vertices,1)/3)
      fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
      fprintf(fid, '    outer loop\n');
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
      fprintf(fid, '    endloop\n');
      fprintf(fid, 'endfacet\n');
    end
  end
end

% Generate base
for j = -2:1
  istart = -2 + floor(abs(j)/2);
  iend = 2 - ceil(abs(j)/2);
  if j >= 0
    istart = istart + 1;
    iend = iend - 1;
  endif
  for i = istart:iend
    % Initial gaps
    vertices = smallGapVertices;
    % Orientation flip
    temp = vertices(1:3:end,:);
    vertices(1:3:end,:) = vertices(2:3:end,:);
    vertices(2:3:end,:) = temp;
    % add the rest of the gaps
    vertices = [...
      vertices;...
      gapVertices;
      ];
    
    vertices = vertices  + ones(size(vertices,1),1) * ...
    [sepFactor*i*12*sqrt(2) sepFactor*j*6*sqrt(6)+sepFactor*4*sqrt(6) 6*sqrt(3)];
    if (mod(j,2)==1)
      vertices = vertices  + ones(size(vertices,1),1) * ...
      [sepFactor*6*sqrt(2) 0 0];
    endif
    
    % Orientation flip
    temp = vertices(1:3:end,:);
    vertices(1:3:end,:) = vertices(2:3:end,:);
    vertices(2:3:end,:) = temp;
    
    % project onto a plane of constant Z
    vertices(:,3) = 16*sqrt(3) * ones(size(vertices,1),1);
    
    % apply xy scale factor
    vertices(:,1:2) = xyScaleFactor * vertices(:,1:2);
    
    for f = 1:(size(vertices,1)/3)
      fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
      fprintf(fid, '    outer loop\n');
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
      fprintf(fid, '    endloop\n');
      fprintf(fid, 'endfacet\n');
    end
  end
end

borderVertices = [...
-20.441 -47.207 18.545;...
-18.906 -46.321 27.713;...
-20.441 -47.207 27.713;...

-21.977 -46.321 27.713;...
-20.441 -47.207 18.545;...
-20.441 -47.207 27.713;...

-20.441 -47.207 18.545;...
-18.906 -46.321 17.933;...
-18.906 -46.321 27.713;...

-21.977 -46.321 17.933;...
-20.441 -47.207 18.545;...
-21.977 -46.321 27.713;...
];

borderVertices2 = [...
30.662 -29.504 18.545;...
32.197 -28.618 17.933;...
32.197 -28.618 27.713;...

32.197 -28.618 27.713;...
30.662 -29.504 27.713;...
30.662 -29.504 18.545;...

30.662 -31.277 17.933;...
30.662 -29.504 18.545;...
30.662 -29.504 27.713;...

30.662 -29.504 27.713;...
30.662 -31.277 27.713;...
30.662 -31.277 17.933;...
];

for r=0:2
  theta = r*2*pi/3;
    rotMatrix = [
    cos(theta) -sin(theta) 0; ...
    sin(theta) cos(theta) 0; ...
    0 0 1];
  for i = 0:2
    vertices = borderVertices;
    
    % grid placement
    vertices = vertices  + ones(size(vertices,1),1) * ...
      [xyScaleFactor*sepFactor*i*12*sqrt(2) xyScaleFactor*sepFactor*4*sqrt(6) 0];
      
    vertices = vertices * rotMatrix';
    
    for f = 1:(size(vertices,1)/3)
      fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
      fprintf(fid, '    outer loop\n');
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
      fprintf(fid, '    endloop\n');
      fprintf(fid, 'endfacet\n');
    end
  end
  for i = 0:0
    vertices = borderVertices2;
    
    % grid placement
    vertices = vertices  + ones(size(vertices,1),1) * ...
      [xyScaleFactor*sepFactor*i*6*sqrt(2) xyScaleFactor*sepFactor*i*6*sqrt(6)+xyScaleFactor*sepFactor*4*sqrt(6) 0];
    
    vertices = vertices * rotMatrix';
    
    for f = 1:(size(vertices,1)/3)
      fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
      fprintf(fid, '    outer loop\n');
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
      fprintf(fid, '    endloop\n');
      fprintf(fid, 'endfacet\n');
    end
  end
end
% deal with annoying boundary conditions
##for j = -2:2
##  istart = -2;
##  if (mod(j,2)==1)
##  iend = 1;
##  else
##  iend = 2;
##  endif
##  if abs(j) ==2
##  istart = -1;
##  iend = 1;
##  endif
##  for i = istart:iend
##    vertices = zeros(0,3);
##    
##    if (j == -2 || (i == istart && j <= 0))
##      vertices = [vertices; borderVerticesBL];
##    endif
##    
##    if (j == -2 || (i == iend && j <= 0))
##      vertices = [vertices; borderVerticesBR];
##    endif
##    
##    if (j == 2 || (i == istart && j >= 0))
##      vertices = [vertices; borderVerticesTL];
##    endif
##    
##    if (j == 2 || (i == iend && j >= 0))
##      vertices = [vertices; borderVerticesTR];
##    endif
##    
##    if (i == istart)
##      vertices = [vertices; borderVerticesL];
##    endif
##    
##    if (i == iend)
##      vertices = [vertices; borderVerticesR];
##    endif
##    
##    vertices = vertices  + ones(size(vertices,1),1) * ...
##    [sepFactor*i*12*sqrt(2) sepFactor*j*6*sqrt(6) 6*sqrt(3)];
##    if (mod(j,2)==1)
##      vertices = vertices  + ones(size(vertices,1),1) * ...
##      [sepFactor*6*sqrt(2) 0 0];
##    endif  
##    
##    % Orientation flip
##    temp = vertices(1:3:end,:);
##    vertices(1:3:end,:) = vertices(2:3:end,:);
##    vertices(2:3:end,:) = temp;
##    
##    % apply xy scale factor
##    vertices(:,1:2) = xyScaleFactor * vertices(:,1:2);
##    
##    for f = 1:(size(vertices,1)/3)
##      fprintf(fid, 'facet normal 0.0 0.0 1.0\n');
##      fprintf(fid, '    outer loop\n');
##      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-2,:));
##      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f-1,:));
##      fprintf(fid, '        vertex %.3f %.3f %.3f\n', vertices(3*f,:));
##      fprintf(fid, '    endloop\n');
##      fprintf(fid, 'endfacet\n');
##    end
##  end
##end

fprintf(fid, 'endsolid\n');
fclose(fid);


